.TH "MainWindow" 3 "Sat May 16 2015" "Blokbox" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MainWindow \- The \fBMainWindow\fP class is the conductor of this player\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <mainwindow\&.h>\fP
.PP
Inherits QMainWindow\&.
.SS "Public Slots"

.in +1c
.ti -1c
.RI "void \fBgoToItem\fP (const QModelIndex &index)"
.br
.RI "\fIgoToItem tells the player to play the selected song on the playlist \fP"
.ti -1c
.RI "void \fBloadMedia\fP ()"
.br
.RI "\fIloadMedia allows the user to load a new file for playing \fP"
.ti -1c
.RI "void \fBloadPlaylist\fP ()"
.br
.RI "\fIloadPlaylist should prepare the playlist \fP"
.ti -1c
.RI "void \fBmediaStatusChanged\fP (QMediaPlayer::MediaStatus status)"
.br
.RI "\fImediaStatusChanged is activated when the media on player changes \fP"
.ti -1c
.RI "void \fBmediaStateChanged\fP (QMediaPlayer::State state)"
.br
.RI "\fImediaStateChanged is activated when media player status changes \fP"
.ti -1c
.RI "void \fBmetaDataChanged\fP ()"
.br
.RI "\fImetaDataChanged is activated every time a given metadata changes on player \fP"
.ti -1c
.RI "void \fBnext\fP ()"
.br
.RI "\fInext should be activated if it wants to play previous media on sequence \fP"
.ti -1c
.RI "void \fBonAddFolderToLibrary\fP ()"
.br
.RI "\fIonAddFolderToLibrary allows the user to insert a whole folder on its audio library\&. \fP"
.ti -1c
.RI "void \fBonAddMediaToPlayList\fP (QString media)"
.br
.RI "\fIonAddMediaToPlayList allows the user to insert a new file on the library \fP"
.ti -1c
.RI "void \fBplayPause\fP ()"
.br
.RI "\fIplayPause should be activated if it wants to play or pause the music \fP"
.ti -1c
.RI "void \fBprev\fP ()"
.br
.RI "\fIprev should be activated if it wants to play next media on sequence \fP"
.ti -1c
.RI "void \fBprocessBuffer\fP (QAudioBuffer buffer)"
.br
.RI "\fIprocessBuffer is responsible to deliver the current audio buffer to a calculator to perform fft calculations \fP"
.ti -1c
.RI "void \fBsetMediaAt\fP (qint32 percent)"
.br
.RI "\fIsetMediaAt alows to forward/rewind the song \fP"
.ti -1c
.RI "void \fBsetVolume\fP (int volume)"
.br
.RI "\fIsetVolume should \fP"
.ti -1c
.RI "void \fBspectrumAvailable\fP (QVector< double > \fBspectrum\fP)"
.br
.RI "\fIspectrumAvailable is emitted every time a new spectrum is ready to be displayed \fP"
.in -1c
.SS "Signals"

.in +1c
.ti -1c
.RI "int \fBspectrumChanged\fP (QVector< double > &\fBsample\fP)"
.br
.RI "\fIspectrumChanged is emitted when a new spectrum is available for display purposes \fP"
.ti -1c
.RI "int \fBpositionChanged\fP (qint64 position)"
.br
.RI "\fIpositionChanged is emitted when media playing position changes \fP"
.ti -1c
.RI "int \fBlevels\fP (double left, double right)"
.br
.RI "\fIlevels tells the new left and right mean audio levels \fP"
.ti -1c
.RI "int \fBelapsedTimeChanged\fP (qint64 elapsed)"
.br
.RI "\fIelapsedTimeChanged tells the duration of media when a new media arrives on media player \fP"
.ti -1c
.RI "int \fBaddFolderToLibrary\fP (QString folder)"
.br
.RI "\fIaddFolderToLibrary tells there are new directories to be added to the music library \fP"
.ti -1c
.RI "int \fBplayPauseChanged\fP (bool)"
.br
.RI "\fIplayPauseChanged emits the state of media player\&. \fP"
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMainWindow\fP (QWidget *parent=0)"
.br
.RI "\fI\fBMainWindow\fP is the class constructor\&. It prepares the whole player for full operation\&. \fP"
.ti -1c
.RI "\fB~MainWindow\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "Ui::MainWindow * \fBui\fP"
.br
.RI "\fIui is a pointer to the user interface widget (not this mainwindow class!!!) \fP"
.ti -1c
.RI "QMediaPlayer * \fBplayer\fP"
.br
.RI "\fIplayer is a pointer to the media player \fP"
.ti -1c
.RI "QMediaPlaylist * \fBplaylist\fP"
.br
.RI "\fIplaylist stores the playlist \fP"
.ti -1c
.RI "QAudioProbe * \fBprobe\fP"
.br
.RI "\fIprobe is the audio prober responsible for listening to the music and retrieve audio buffers \fP"
.ti -1c
.RI "\fBFFTCalc\fP * \fBcalculator\fP"
.br
.RI "\fIcalculator is a Fourier spectrum calculator\&. \fP"
.ti -1c
.RI "QStandardItemModel * \fBmodel\fP"
.br
.RI "\fImodel stores the playlist model \fP"
.ti -1c
.RI "QVector< double > \fBsample\fP"
.br
.RI "\fIsample stores an audio sample to be sent for fft calculator \fP"
.ti -1c
.RI "QVector< double > \fBspectrum\fP"
.br
.RI "\fIspectrum stores the output Fourier spectrum \fP"
.ti -1c
.RI "\fBPlaylistModel\fP * \fBplaylistModel\fP"
.br
.RI "\fIplaylistModel stores the playlist model for insertions and display purposes\&.\&.\&. \fP"
.ti -1c
.RI "double \fBlevelLeft\fP"
.br
.RI "\fIlevelLeft and rightlevel stores audio mean left and right levels \fP"
.ti -1c
.RI "double \fBlevelRight\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
The \fBMainWindow\fP class is the conductor of this player\&. 

The \fBMainWindow\fP class is used to manage with all stuff fft, audio probing, widget properties\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "MainWindow::MainWindow (QWidget * parent = \fC0\fP)\fC [explicit]\fP"

.PP
\fBMainWindow\fP is the class constructor\&. It prepares the whole player for full operation\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP 
.RE
.PP
some settings attempt
.PP
<aloha 
.SS "MainWindow::~MainWindow ()"

.SH "Member Function Documentation"
.PP 
.SS "int MainWindow::addFolderToLibrary (QString folder)\fC [signal]\fP"

.PP
addFolderToLibrary tells there are new directories to be added to the music library We do not threat this signal yet\&. It is here just to remember include library customization in the future 
.PP
\fBParameters:\fP
.RS 4
\fIfolder\fP stores string folder 
.RE
.PP

.SS "int MainWindow::elapsedTimeChanged (qint64 elapsed)\fC [signal]\fP"

.PP
elapsedTimeChanged tells the duration of media when a new media arrives on media player 
.PP
\fBParameters:\fP
.RS 4
\fIelapsed\fP is the amount of time elapsed from the beginning of the song 
.RE
.PP

.SS "void MainWindow::goToItem (const QModelIndex & index)\fC [slot]\fP"

.PP
goToItem tells the player to play the selected song on the playlist 
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP stores the index of the song 
.RE
.PP

.SS "int MainWindow::levels (double left, double right)\fC [signal]\fP"

.PP
levels tells the new left and right mean audio levels 
.PP
\fBParameters:\fP
.RS 4
\fIleft\fP stores left mean audio level 
.br
\fIright\fP stores right mean audio level 
.RE
.PP

.SS "void MainWindow::loadMedia ()\fC [slot]\fP"

.PP
loadMedia allows the user to load a new file for playing 
.SS "void MainWindow::loadPlaylist (void)\fC [slot]\fP"

.PP
loadPlaylist should prepare the playlist nothing here yet 
.SS "void MainWindow::mediaStateChanged (QMediaPlayer::State state)\fC [slot]\fP"

.PP
mediaStateChanged is activated when media player status changes It deals with player's playback status 
.PP
\fBParameters:\fP
.RS 4
\fIstate\fP receives current state\&. Possible values are: -QMediaPlayer::StoppedState -QMediaPlayer::PlayingState
.IP "\(bu" 2
QMediaPlayer::PausedState 
.PP
.RE
.PP

.SS "void MainWindow::mediaStatusChanged (QMediaPlayer::MediaStatus status)\fC [slot]\fP"

.PP
mediaStatusChanged is activated when the media on player changes It is used to communicate the song duration has changed 
.PP
\fBParameters:\fP
.RS 4
\fIstatus\fP is not used here 
.RE
.PP

.SS "void MainWindow::metaDataChanged ()\fC [slot]\fP"

.PP
metaDataChanged is activated every time a given metadata changes on player Metadata are used to store on song files information such as artist, song title, album title, year etc\&. 
.SS "void MainWindow::next ()\fC [slot]\fP"

.PP
next should be activated if it wants to play previous media on sequence 
.SS "void MainWindow::onAddFolderToLibrary ()\fC [slot]\fP"

.PP
onAddFolderToLibrary allows the user to insert a whole folder on its audio library\&. A library component is specially crafted to deal with library manipulation details 
.SS "void MainWindow::onAddMediaToPlayList (QString media)\fC [slot]\fP"

.PP
onAddMediaToPlayList allows the user to insert a new file on the library 
.PP
\fBParameters:\fP
.RS 4
\fImedia\fP is the path to the file the user wants to insert 
.RE
.PP

.SS "void MainWindow::playPause ()\fC [slot]\fP"

.PP
playPause should be activated if it wants to play or pause the music 
.SS "int MainWindow::playPauseChanged (bool)\fC [signal]\fP"

.PP
playPauseChanged emits the state of media player\&. It may be used to update a play/pause button somewhere since the user may decide to user different icons for different states\&.
.IP "\(bu" 2
true: Player is on playing state
.IP "\(bu" 2
false: Player is on paused state 
.PP
\fBReturns:\fP
.RS 4

.RE
.PP

.PP

.SS "int MainWindow::positionChanged (qint64 position)\fC [signal]\fP"

.PP
positionChanged is emitted when media playing position changes 
.PP
\fBParameters:\fP
.RS 4
\fIposition\fP is a value on range [0,total duration of song] 
.RE
.PP

.SS "void MainWindow::prev ()\fC [slot]\fP"

.PP
prev should be activated if it wants to play next media on sequence 
.SS "void MainWindow::processBuffer (QAudioBuffer buffer)\fC [slot]\fP"

.PP
processBuffer is responsible to deliver the current audio buffer to a calculator to perform fft calculations 
.PP
\fBParameters:\fP
.RS 4
\fIbuffer\fP stores the audio buffer that is sent by the player 
.RE
.PP

.SS "void MainWindow::setMediaAt (qint32 percent)\fC [slot]\fP"

.PP
setMediaAt alows to forward/rewind the song The user may have multiple controls ant this will help to keep controls coherent 
.PP
\fBParameters:\fP
.RS 4
\fIpercent\fP tells the percentage of stream it wants to play 
.RE
.PP

.SS "void MainWindow::setVolume (int volume)\fC [slot]\fP"

.PP
setVolume should 
.PP
\fBParameters:\fP
.RS 4
\fIvolume\fP 
.RE
.PP

.SS "void MainWindow::spectrumAvailable (QVector< double > spectrum)\fC [slot]\fP"

.PP
spectrumAvailable is emitted every time a new spectrum is ready to be displayed 
.PP
\fBParameters:\fP
.RS 4
\fIspectrum\fP is an array of doubles containing the Fourier spectrum 
.RE
.PP

.SS "int MainWindow::spectrumChanged (QVector< double > & sample)\fC [signal]\fP"

.PP
spectrumChanged is emitted when a new spectrum is available for display purposes 
.PP
\fBParameters:\fP
.RS 4
\fIsample\fP stores the array of doubles with the Fourier spectrum 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "\fBFFTCalc\fP* MainWindow::calculator\fC [private]\fP"

.PP
calculator is a Fourier spectrum calculator\&. The calculator 'object' receives audio samples, perform fft calculations and tells Fourier spectrums when they are ready for displaying 
.SS "double MainWindow::levelLeft\fC [private]\fP"

.PP
levelLeft and rightlevel stores audio mean left and right levels 
.SS "double MainWindow::levelRight\fC [private]\fP"

.SS "QStandardItemModel* MainWindow::model\fC [private]\fP"

.PP
model stores the playlist model We use a model/view approach to store the playlist elements\&. This approach allows listview elements access the playlist structure and interpret it as kind of tree with branches of artists\&.\&.\&. and disks\&.\&.\&. and songs\&. 
.SS "QMediaPlayer* MainWindow::player\fC [private]\fP"

.PP
player is a pointer to the media player 
.SS "QMediaPlaylist* MainWindow::playlist\fC [private]\fP"

.PP
playlist stores the playlist 
.SS "\fBPlaylistModel\fP* MainWindow::playlistModel\fC [private]\fP"

.PP
playlistModel stores the playlist model for insertions and display purposes\&.\&.\&. 
.SS "QAudioProbe* MainWindow::probe\fC [private]\fP"

.PP
probe is the audio prober responsible for listening to the music and retrieve audio buffers 
.SS "QVector<double> MainWindow::sample\fC [private]\fP"

.PP
sample stores an audio sample to be sent for fft calculator 
.SS "QVector<double> MainWindow::spectrum\fC [private]\fP"

.PP
spectrum stores the output Fourier spectrum 
.SS "Ui::MainWindow* MainWindow::ui\fC [private]\fP"

.PP
ui is a pointer to the user interface widget (not this mainwindow class!!!) 

.SH "Author"
.PP 
Generated automatically by Doxygen for Blokbox from the source code\&.
